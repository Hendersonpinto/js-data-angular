@doc overview
@id index
@name Overview of Angular-data
@description

# Overview

<page-list></page-list>

@doc overview
@id overview
@name Overview of Angular-data
@description

Angular-data is an in-browser data store for [Angular.js](http://angularjs.org).
[Synchronous methods](/documentation/guide/synchronous/index) work only with data already in the data store, and
[asynchronous methods](/documentation/guide/asynchronous/index) work with persistence layer.

<p>
    <img src="/resources/img/chart.png" width="940">
</p>

## Example:
```js
angular.module('myApp', ['angular-data.DS'])
	.config(function (DSProvider) {
		DSProvider.defaults.baseUrl = 'https://example.com/api';
		{...}
	})
	.run(function (DS) {
		DS.defineResource({
			name: 'post',
			endpoint: 'posts',
			idAttribute: '_id'
		});
	})
	.controller('PostCtrl', function ($scope, DS) {
		var query = {
                        query: {
                            where: {
                                author: 'John Anderson'
                            }
                        }
                    };

		DS.findAll('post', query);

		$scope.$watch(function () {
			return DS.lastModified('post');
		}, function () {
			$scope.posts = DS.filter('post', query);
		});
	});
```

Angular-data does not decorate your data in any wayâ€“your data maintains the pure POJO representation common to Angular
apps. Angular-data maintains meta information about your data to facilitate its operation. You can "watch" data that
resides in the data store to stay up-to-date on that data.

```js
$scope.posts;   //  [{ id: 1, author: 'John Anderson', title: 'How to cook' },
					 { id: 2, author: 'John Anderson', title: 'How NOT to cook' }]
```

You define _resources_ and register them with the data store. A _resource definition_ tells angular-data
about a particular resource, like what its root endpoint is and which attribute refers to the primary key of the
resource. A _resource definition_ can also specify validation functions to be executed during model lifecycle operations.

```js
DS.defineResource({
	name: 'post',
	endpoint: 'posts',
	idAttribute: '_id',
	validate: function (resourceName, attrs, cb) {
		if (!attrs.title) {
			cb('Title is required');
		} else {
			cb(null, attrs);
		}
	}
});
```

`validate` will be executed at the beginning of the lifecycle initiated by a call to `DS.create` or `DS.save`.
```js
DS.create('post', { author: 'Sally', title: 'Angular gotchas' })
	.then(function (post) {
		post; // { id: 65, author: 'Sally', title: 'Angular gotchas' }
	});

DS.create('post', { author: 'Sally' })
	.then(null, function (err) {
		err; // 'Title is required'
	});
```

@doc overview
@id resources
@name Define a resource
@description

Angular-data keeps track of _resource definitions_ to know what kind of data should be managed by the data store.

```js
myApp.run(function (DS) {

	// This is a basic resource definition
	DS.defineResource({
		name: 'document'
	});

	// angular-data now knows it can perform
	// operations related to the "document" resource
});
```

See the [Resource Guide](/documentation/guide/resource/index) for detailed information on defining resources.

@doc overview
@id synchronous
@name Synchronous Methods
@description

Angular-data ships with a number of synchronous methods that provide instance access to data currently in the store.

These methods are meant to be used outside of the context of client-server communication.

Example:

```js
DS.get('document', 45); // { title: 'How to Cook', id: 45 }
```

`get(resourceName, id)` will return the data if it is in the store, otherwise `undefined`. This method is useful inside
of a `$watch` callback function, for example:

```js
$scope.$watch(function () {
	// Here we are watching the "lastModified" timestamp maintained by the data store for this particular document

	return DS.lastModified('document', 45);
}, function (lastModifiedTimestamp) {
	// When this callback is executed, it means that the data store thinks the item changed

	// Retrieve the updated item from the data store's cache
	$scope.document = DS.get('document', 45);
});
```

When the app starts up, the calls to `lastModified()` and `get()` will both returned undefined, because the item isn't in
the data store yet. If we insert the statement: `DS.find('document', 45);` right above the `$watch` function, the data store will make an
AJAX request for that item. When the item returns from the server, the last modified timestamp for that item will change
from `undefined` to something like `1388809123529`, causing the `get()` call inside the `$watch` callback function to be
executed, retrieving the item from the data store and putting it on the `$scope`.

Various other synchronous methods provide operations that execute immediately on data currently in the store. None of
these methods persist their actions to the server.

#### Another example

Let's say two users both have access to a particular document, but one user deletes the document. If you're using web
sockets or some other method to push data to the client, you can inform user #2 that the document has been
deleted. Example:

This document is in the data store for both users: `{ title: 'How to Cook', id: 45 }`

User #1 (asynchronous)
```js
DS.destroy('document', 45).then(function (id) {...}); // sends DELETE request to the server
```

User #2 receives notification from the server that document 45 was deleted and synchronously ejects it from the data store.
```js
DS.eject('document', 45); // synchronously eject document from the store
```

User #2 doesn't need to destroy document 45, because it's already been deleted on the server by user #1. User #2 just
needs to kick document 45 out of the data store and be done with it.

See the [API](/documentation/api/api/index) for more information.

@doc overview
@id asynchronous
@name Asynchronous Methods
@description

Angular-data ships with a number of asynchronous methods that facilitate communication between the data store and the
persistence layer. These methods cover the basic CRUD operations.

The asynchronous methods return Promises produced by Angular's `$q` service.

Example:

```js
DS.get('document', 45); // undefined

DS.find('document', 45).then(function (document) {
	document; // { title: 'How to Cook', id: 45 }

	// document 45 has already been injected into the store at this point
	DS.get('document', 45); // { title: 'How to Cook', id: 45 }
});

DS.get('document', 45); // still undefined, because the find operation has not completed yet
```

#### Another example

```js
var document = DS.get('document', 45); // { title: 'How to Cook', id: 45 }

document.title = 'How NOT to cook';

DS.save('document', 45).then(function (document) {
	document; // { title: 'How NOT to Cook', id: 45 }

	// document 45 in the store has been updated
	DS.get('document', 45); // { title: 'How NOT to Cook', id: 45 }
});

DS.get('document', 45); // { title: 'How to Cook', id: 45 }
```

See the [API](/documentation/api/api/index) for more information.
