@doc overview
@id index
@name Resource Guide
@description

# Resource Guide

<page-list></page-list>

@doc overview
@id overview
@name Overview
@description

A _resource_ is the data and meta data associated with a particular RESTful endpoint.

You define _resources_ and register them with the data store. A _resource definition_ tells angular-data
about a particular _resource_, like what its root endpoint is and which attribute refers to the primary key of the
resource. A _resource definition_ can also specify validation functions to be executed before create and update
operations.

See [defineResource(definition)](/documentation/api/api/DS.sync_methods:defineResource) for detailed API information.

@doc overview
@id basic
@name Define a basic resource
@description

The simplest resource definition:

```js
DS.defineResource('document');
```

With this definition the data store assumes the following:

- Resource will be referred to as `"document"`
- The RESTful endpoint for this resource is `DSProvider.defaults.baseUrl + "/document"`
- The primary key is specified by the `"id"` property (or whatever is specified by `DSProvider.defaults.idAttribute`)
- This resource has no custom lifecycle hooks (unless `DSProvider.defaults` has some lifecycle hooks defined)

@doc overview
@id advanced
@name Advanced example
@description

An advanced resource definition:

```js
DS.defineResource({
	name: 'document',
	idAttribute: '_id',
	endpoint: 'documents',
	baseUrl: 'https://example.com/api',
	validate: function (attrs, cb) {
		if (!angular.isObject(attrs) {
			cb('Must be an object!');
		} else if (!angular.isString(attrs.title)) {
			cb('title must be a string!');
		}
	}
});
```

With this definition the data store understands the following:

- Resource will be referred to as `"document"`
- The RESTful endpoint for this resource is `"https://example.com/api/documents"`
- The primary key is specified by the `"_id"` property
- Before create/save operations, the provided `validate` function is executed (and any lifecycle hooks defined in `DSProvider.defaults`)

See [DS.defineResource](/documentation/api/api/DS.sync_methods:defineResource) for the full resource definition specification.

@doc overview
@id lifecycle
@name Model Lifecycle Hooks
@description

The following asynchronous operations support a model lifecycle:

### DS.create()

- `beforeValidate` - Default: `noop`
- `validate` - Default: `noop`
- `afterValidate` - Default: `noop`
- `beforeCreate` - Default: `noop`
- `create` - Implementation provided by adapter
- `afterCreate` - Default: `noop`

### DS.save()

- `beforeValidate` - Default: `noop`
- `validate` - Default: `noop`
- `afterValidate` - Default: `noop`
- `beforeUpdate` - Default: `noop`
- `save` - Implementation provided by adapter
- `afterUpdate` - Default: `noop`

### DS.destroy()

- `beforeValidate` - Default: `noop`
- `validate` - Default: `noop`
- `afterValidate` - Default: `noop`
- `beforeDestroy` - Default: `noop`
- `destroy` - Implementation provided by adapter
- `afterDestroy` - Default: `noop`

### Define lifecycle hooks
All lifecycle hooks will be executed according to the following signature:
```js
exampleHook(resourceName, attrs, cb) {...}
```

`resourceName` is the name of the resource that `attrs` belong to, which is a reference to the object on which `create`,
 `save` or `destroy` was originally called.

`cb` is the callback function to be executed when the lifecycle hook is done. `cb` follows the Node style of callbacks,
where the first passed argument will be the error, if any, and the second is the result. In the case of these lifecycle
functions, `attrs` _is_ the result. So, `attrs` is available for inspection and/or modification, and then should be passed
to `cb`. For example:

```js
validate(resourceName, attrs, cb) {
	console.log('hmm, looks good to me!');
	cb(null, attrs); // no error
}
```

```js
validate(resourceName, attrs, cb) {
	console.log('something went wrong!');
	cb('some error'); // error!
}
```

The lifecycle will be aborted if `cb` receives an error or an error is thrown.

Finally, model lifecycle hooks can be defined at the global level or per-resource. For example:

```js
angular.module('myApp', ['angular-data.DS'])
	.config(function (DSProvider) {

		// Global definition
		DSProvider.defaults.beforeCreate = function (resourceName, attrs, cb) {
			console.log('Global beforeCreate');
			cb(null, attrs);
		};

	})
	.run(function (DS) {

		DS.defineResource({
			name: 'post',

			// Local definition, overrides the global definition
			beforeCreate = function (resourceName, attrs, cb) {
				console.log('beforeCreate defined for ' + resourceName);
				cb(null, attrs);
			}
		});

		// Will use the global definition
		DS.defineResource({
			name: 'comment'
		});

	});
```
